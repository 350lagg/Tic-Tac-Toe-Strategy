#include "functions.h"

GameField::GameField()
{
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            board[i][j] = ' ';
}

GameField::GameField(char b[3][3])
{
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            board[i][j] = b[i][j];
}

char GameField::get(int i, int j) const
{
    return board[i][j];
}

void  GameField::set(int i, int j, char value)
{
    if (i >= 0 && i < 3 && j >= 0 && j < 3)
        board[i][j] = value;
}

void GameField::getBoard(char dest[3][3]) const
{
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            dest[i][j] = board[i][j];
}

bool GameField::isFull() const
{

    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            if (board[i][j] == '.')
                return false;
    return true;
}

bool GameField::hasWinner(char player) const
{
    for (int i = 0; i < 3; ++i)
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player)
            return true;
    for (int j = 0; j < 3; ++j)
        if (board[0][j] == player && board[1][j] == player && board[2][j] == player)
            return true;
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player)
        return true;
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player)
        return true;
    return false;
}

Error readInput(const string& filename, char board[3][3], char& player)
{
    //Если входной файл не открылся
    {
        //2 Завершение работы программы, вернуть индекс ошибки inputFileError
    }
    //Cчитывание строк входного файла пока они есть
    {
        //если количество строк меньше 3 
        {
            //если длинна строки не равно 3 
            {
                //Завершение работы программы, вернуть индекс ошибки lineLengthError
            }
            //посимвольная проверка строк входного файла
            {
                //если найден невозможный символ 
                {
                    //Завершение работы программы, вернуть индекс ошибки lineContentError
                }
            }
        }
        //иначе если количество строк равно 3 
        {
            //если тип игрока невозможный символ 
            {
                //Завершение работы программы, вернуть индекс ошибки lineContentError
            }
        }
        //иначе 
        {
            //Завершение работы программы, вернуть индекс ошибки manyLinesError
        }
    }
    //если количество строк меньше 4 
    {
        //Завершение работы программы, вернуть индекс ошибки notEnoughLinesError
    }
    //вернуть индекс ошибки noError
    Error a;
    return a;
}

TreeNode* generateStrategyTree(GameField position, char chosenPlayer, char currentPlayer, int& nodeId)
{
    //Записать новый узел как текущий
    //Запомнить символ оппонента основываясь на символе выбранного игрока
    //Проверить поле на конец игры 
    //Если игра окончена вернуть текущий узел
    //Если текущий игрок выбранный игрок 
    {
        //Найти лучший ход#
        //Рекурсивно вызвать функцию считая текущим положением лучший ход для оппонента
        //Записать лучший ход в древо
    }
    //Иначе
    {
        //Для всех символов поля
        {
            //Если символ пустой
            {
                //Запомнить положение поля
                //Заменить в запомненном положении текущий символ на знак выбранного игрока 
                //Рекурсивно вызвать функцию считая текущим положением последний ход для выбранного игрока
                //Записать последний ход в древо
            }
        }
    }
    //Вернуть элемент древа ходов
    char board[3][3] =
    {
        {'.', '.', '.'},
        {'.', '.', '.'},
        {'.', '.', '.'}
    };
    GameField rootField(board);
    TreeNode* a = new TreeNode(rootField, 0);
    return a;
}

EvalResult evaluateGame(GameField field, char curPlayer, char maximizingPlayer)
{
    //Записать символ оппонента основываясь на символе выбранного игрока
    //Проверить поле на конец игры 
    //Если игры окончена вернуть величину исхода
    //Для каждого символа поля
    {
        //Если символ пустой
        {
            //Запомнить положение поля
            //Заменить в запомненном положении текущий символ на знак выбранного игрока 
            //Рекурсивно вызвать функцию считая текущим положением поля последний ход для оппонента
            //Запомнить результат
        }
    }
    //Для результата
    {
        //Если ход – мгновенная победа 
        {
            //Вернуть величины исхода и ход
        }
        //Если ход – мгновенная победа противника
        {
            //Вернуть величины исхода и ход
        }
    }
    //Запомнить результаты
    //Для результатов 
    {
        //Если текущий игрок-выбранный игрок
        {
            //Выбираем лучший ход
        }
        //Иначе
        {
            //Рассматриваем все ходы
        }
    }
    //Считаем общее количество побед для хода
    //Возвращаем минимальный исход, количество побед и лучший ход
    EvalResult a;
    return a;
}

void writeDot(TreeNode* node, ofstream& out, int& idCounter)
{
    //Запомнить текущий номер записи
    //Для каждого знака поля
    {
        //Записать его в строку
    }
    //Вывести строку в нужном формате
    //Для каждого потомка в древе
    {
        //Записать связь
        //Рекурсивно вызвать функцию
    }
}

void exportTreeToDot(TreeNode* root, const string& filename)
{
    //Открыть выходной файл
    //Если выходной файл не открывается
    {
        //Завершение работы программы, вернуть ошибку outputFileError
    }
    //Записать digraph G {
    //Запись древа в формат .dot
    //Записать }
    //Закрыть файл
}

int main(int argc, char* argv[])
{
	//Считывание и проверка файлов
    //Если проверка данных файлов не прошла
    {
        //Вернуть ошибку
        //Завершение работы программы
    }
    //Иначе
    {
        //Работа главной вычислительной функции для нахождения дерева ходов в крестики-нолики
        //Вывод программы 
    }
}

